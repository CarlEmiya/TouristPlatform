<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.travel.mapper.FileMapper">
  <resultMap id="FileResultMap" type="com.travel.entity.File">
    <id column="fid" jdbcType="BIGINT" property="fid" />
    <result column="connectid" jdbcType="BIGINT" property="connectid" />
    <result column="path" jdbcType="LONGVARCHAR" property="path" />
    <result column="type" jdbcType="LONGVARCHAR" property="type" />
  </resultMap>
  <resultMap extends="FileResultMap" id="ResultMapWithBLOBs" type="com.travel.entity.File">
    <result column="path" jdbcType="LONGVARCHAR" property="path" />
    <result column="type" jdbcType="LONGVARCHAR" property="type" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    fid, connectid
  </sql>
  <sql id="Blob_Column_List">
    path, type
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.travel.entity.FileExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.travel.entity.FileExample" resultMap="FileResultMap">
    select fid, connectid, path, type
    from file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from file
    where fid = #{fid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from file
    where fid = #{fid,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.travel.entity.FileExample">
    delete from file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.travel.entity.File">
    insert into file (fid, connectid, path, 
      type)
    values (#{fid,jdbcType=BIGINT}, #{connectid,jdbcType=BIGINT}, #{path,jdbcType=LONGVARCHAR}, 
      #{type,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.travel.entity.File">
    insert into file
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="fid != null">
        fid,
      </if>
      <if test="connectid != null">
        connectid,
      </if>
      <if test="path != null">
        path,
      </if>
      <if test="type != null">
        type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="fid != null">
        #{fid,jdbcType=BIGINT},
      </if>
      <if test="connectid != null">
        #{connectid,jdbcType=BIGINT},
      </if>
      <if test="path != null">
        #{path,jdbcType=LONGVARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.travel.entity.FileExample" resultType="java.lang.Long">
    select count(*) from file
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>


    <select id="isFidExist" resultType="java.lang.Boolean">
      select count(*) from file where fid = #{fid,jdbcType=BIGINT}
    </select>


    <update id="updateByExampleSelective" parameterType="map">
    update file
    <set>
      <if test="record.fid != null">
        fid = #{record.fid,jdbcType=BIGINT},
      </if>
      <if test="record.connectid != null">
        connectid = #{record.connectid,jdbcType=BIGINT},
      </if>
      <if test="record.path != null">
        path = #{record.path,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update file
    set fid = #{record.fid,jdbcType=BIGINT},
      connectid = #{record.connectid,jdbcType=BIGINT},
      path = #{record.path,jdbcType=LONGVARCHAR},
      type = #{record.type,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update file
    set fid = #{record.fid,jdbcType=BIGINT},
      connectid = #{record.connectid,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.travel.entity.File">
    update file
    <set>
      <if test="connectid != null">
        connectid = #{connectid,jdbcType=BIGINT},
      </if>
      <if test="path != null">
        path = #{path,jdbcType=LONGVARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where fid = #{fid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.travel.entity.File">
    update file
    set connectid = #{connectid,jdbcType=BIGINT},
      path = #{path,jdbcType=LONGVARCHAR},
      type = #{type,jdbcType=LONGVARCHAR}
    where fid = #{fid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.travel.entity.File">
    update file
    set connectid = #{connectid,jdbcType=BIGINT}
    where fid = #{fid,jdbcType=BIGINT}
  </update>
</mapper>